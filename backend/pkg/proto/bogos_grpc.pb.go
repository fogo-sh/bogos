// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: pkg/proto/bogos.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UsersClient is the client API for Users service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersClient interface {
	GetJwt(ctx context.Context, in *GetJwtRequest, opts ...grpc.CallOption) (*GetJwtReply, error)
	GetCurrentUser(ctx context.Context, in *GetCurrentUserRequest, opts ...grpc.CallOption) (*User, error)
	UpdateCurrentUser(ctx context.Context, in *UpdateCurrentUserRequest, opts ...grpc.CallOption) (*User, error)
}

type usersClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersClient(cc grpc.ClientConnInterface) UsersClient {
	return &usersClient{cc}
}

func (c *usersClient) GetJwt(ctx context.Context, in *GetJwtRequest, opts ...grpc.CallOption) (*GetJwtReply, error) {
	out := new(GetJwtReply)
	err := c.cc.Invoke(ctx, "/bogos.Users/GetJwt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetCurrentUser(ctx context.Context, in *GetCurrentUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/bogos.Users/GetCurrentUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) UpdateCurrentUser(ctx context.Context, in *UpdateCurrentUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/bogos.Users/UpdateCurrentUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServer is the server API for Users service.
// All implementations must embed UnimplementedUsersServer
// for forward compatibility
type UsersServer interface {
	GetJwt(context.Context, *GetJwtRequest) (*GetJwtReply, error)
	GetCurrentUser(context.Context, *GetCurrentUserRequest) (*User, error)
	UpdateCurrentUser(context.Context, *UpdateCurrentUserRequest) (*User, error)
	mustEmbedUnimplementedUsersServer()
}

// UnimplementedUsersServer must be embedded to have forward compatible implementations.
type UnimplementedUsersServer struct {
}

func (UnimplementedUsersServer) GetJwt(context.Context, *GetJwtRequest) (*GetJwtReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJwt not implemented")
}
func (UnimplementedUsersServer) GetCurrentUser(context.Context, *GetCurrentUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentUser not implemented")
}
func (UnimplementedUsersServer) UpdateCurrentUser(context.Context, *UpdateCurrentUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCurrentUser not implemented")
}
func (UnimplementedUsersServer) mustEmbedUnimplementedUsersServer() {}

// UnsafeUsersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServer will
// result in compilation errors.
type UnsafeUsersServer interface {
	mustEmbedUnimplementedUsersServer()
}

func RegisterUsersServer(s grpc.ServiceRegistrar, srv UsersServer) {
	s.RegisterService(&Users_ServiceDesc, srv)
}

func _Users_GetJwt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJwtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetJwt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bogos.Users/GetJwt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetJwt(ctx, req.(*GetJwtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetCurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetCurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bogos.Users/GetCurrentUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetCurrentUser(ctx, req.(*GetCurrentUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_UpdateCurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCurrentUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).UpdateCurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bogos.Users/UpdateCurrentUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).UpdateCurrentUser(ctx, req.(*UpdateCurrentUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Users_ServiceDesc is the grpc.ServiceDesc for Users service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Users_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bogos.Users",
	HandlerType: (*UsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetJwt",
			Handler:    _Users_GetJwt_Handler,
		},
		{
			MethodName: "GetCurrentUser",
			Handler:    _Users_GetCurrentUser_Handler,
		},
		{
			MethodName: "UpdateCurrentUser",
			Handler:    _Users_UpdateCurrentUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/bogos.proto",
}

// OutingsClient is the client API for Outings service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OutingsClient interface {
	ListOutings(ctx context.Context, in *ListOutingsRequest, opts ...grpc.CallOption) (*ListOutingsReply, error)
	ListOutingUsers(ctx context.Context, in *ListOutingUsersRequest, opts ...grpc.CallOption) (*ListOutingUsersReply, error)
}

type outingsClient struct {
	cc grpc.ClientConnInterface
}

func NewOutingsClient(cc grpc.ClientConnInterface) OutingsClient {
	return &outingsClient{cc}
}

func (c *outingsClient) ListOutings(ctx context.Context, in *ListOutingsRequest, opts ...grpc.CallOption) (*ListOutingsReply, error) {
	out := new(ListOutingsReply)
	err := c.cc.Invoke(ctx, "/bogos.Outings/ListOutings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outingsClient) ListOutingUsers(ctx context.Context, in *ListOutingUsersRequest, opts ...grpc.CallOption) (*ListOutingUsersReply, error) {
	out := new(ListOutingUsersReply)
	err := c.cc.Invoke(ctx, "/bogos.Outings/ListOutingUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OutingsServer is the server API for Outings service.
// All implementations must embed UnimplementedOutingsServer
// for forward compatibility
type OutingsServer interface {
	ListOutings(context.Context, *ListOutingsRequest) (*ListOutingsReply, error)
	ListOutingUsers(context.Context, *ListOutingUsersRequest) (*ListOutingUsersReply, error)
	mustEmbedUnimplementedOutingsServer()
}

// UnimplementedOutingsServer must be embedded to have forward compatible implementations.
type UnimplementedOutingsServer struct {
}

func (UnimplementedOutingsServer) ListOutings(context.Context, *ListOutingsRequest) (*ListOutingsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOutings not implemented")
}
func (UnimplementedOutingsServer) ListOutingUsers(context.Context, *ListOutingUsersRequest) (*ListOutingUsersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOutingUsers not implemented")
}
func (UnimplementedOutingsServer) mustEmbedUnimplementedOutingsServer() {}

// UnsafeOutingsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OutingsServer will
// result in compilation errors.
type UnsafeOutingsServer interface {
	mustEmbedUnimplementedOutingsServer()
}

func RegisterOutingsServer(s grpc.ServiceRegistrar, srv OutingsServer) {
	s.RegisterService(&Outings_ServiceDesc, srv)
}

func _Outings_ListOutings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOutingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutingsServer).ListOutings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bogos.Outings/ListOutings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutingsServer).ListOutings(ctx, req.(*ListOutingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Outings_ListOutingUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOutingUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutingsServer).ListOutingUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bogos.Outings/ListOutingUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutingsServer).ListOutingUsers(ctx, req.(*ListOutingUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Outings_ServiceDesc is the grpc.ServiceDesc for Outings service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Outings_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bogos.Outings",
	HandlerType: (*OutingsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListOutings",
			Handler:    _Outings_ListOutings_Handler,
		},
		{
			MethodName: "ListOutingUsers",
			Handler:    _Outings_ListOutingUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/bogos.proto",
}
